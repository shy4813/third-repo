Git 명령어 학습 실습

프롬프트창 화면 청소 명령어 : clear

터미널 현재 경로 확인 명령어 : pwd

경로로 이동 명령어 : cd

cd /c/Users/User/Desktop/git_command

로컬 저장소 생성 명령어 : git init

성공 시 프롬프트 창에 Initialized empty Git repository in 경로명 출력된다.

비어있는 파일 생성 명령어 : touch

touch a.txt

현재 작업 디렉토리 상태 확인 명령어 : git status

Untracked files : 깃이 기존에 변경사항을 추적하고 있지 않았던 파일 (갑자기 툭 생긴 파일)
Changes not staged for commit: 깃이 변경사항을 추적하고 있으면서 변경된 파일이 modified: 파일명으로 출력

스테이지 추가 명령어 : git add 파일이름

git add a.txt
git status

Changes to be committed: 커밋이 될 준비가 된 파일

커밋 명령어 : git commit -m "커밋 메세지" (커밋 메세지의 제목만 작성)

git commit -m "first commit"

지금까지 만든 버전 목록을 확인하는 명령어 : git log

커밋 메세지를 제목 뿐만 아니라 자세하게 작성하고 싶은 경우 : git commit 입력 후 vi 편집기로 진입

Insert 모드 진입하여,
첫 줄엔 커밋 메세지 헤더(제목) 입력
엔터 두 번 (한 칸 비워 둔 채로) 커밋 메세지 본문 입력
명령 모드 진입 후 :wq 로 저장하면서 vi 편집기 닫는다.


// vi 편집기 명령어 복습

a, i, o : Insert(입력) 모드 진입
esc : 명령 모드 진입
명령 모드 진입 후 :wq <- vi 편집기 저장(w) 후 닫기(q)

// 

git status 명령어 입력후 프롬프트 창에서 아래와 같이 출력될 때 
(변경된 파일이 하나 이상, 즉 여러 개일 때)

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   a.txt
        modified:   b.txt

no changes added to commit (use "git add" and/or "git commit -a")

//

git add a.txt b.txt 로 하나하나 지칭하여 스테이지에 올릴 수도 있겠으나

git add .

위와 같이 .(현재 디렉토리)을 이용하여 변경된 모든 파일을 한번에 스테이지에 추가할 수 있다.

//

이미 깃이 추적 관리 중인 파일의 경우 

git add 파일명으로 스테이지에 올린 뒤, 
git commit -m "커밋 메세지"로 두 단계에 걸쳐 커밋을 하는 것이 아니라

한번에 커밋할 수 있는데, 아래와 같이 한다.

git commit -am "커밋 메세지" 

-a : commit 명령에서 add 과정을 한번에 하겠다는 옵션
-m : 커밋 메세지 작성 옵션

//

git log 명령어 다채롭게 사용하기

깃 버전 목록들을 한 줄로 출력해주는 옵션 --oneline
git log --oneline

각각의 커밋이 어떤 변경사항을 담고 있는지 출력해주는 옵션 -p 또는 --patch
(위 아래 화살표 키로 이동하며 볼 수 있고 q버튼으로 나간다)

git log -p
git log --patch

소스 트리의 그래프와 같은 것을 터미널로 보여주는 옵션 --graph
git log --graph

옵션을 섞어 사용할 수도 있다.
한 줄로 출력하되 그래프로도 볼 거야 :
git log --oneline --graph 

//

git 태그 관리하기

git tag 태그이름

예를 들어

git tag v0.0.1 을 입력하면 가장 최신의 commit에 v0.0.1이라는 태그가 달린다.

특정 커밋에 태그를 다는 방법
git tag 태그이름 커밋해쉬

예시 )   ( 최신보다 이전 commit에 v0.0.2가 달리는 건 이상하지만 실습이므로 넘어가기)

git tag v0.0.2 6f11c67213d2b1d2ef281a691e0b2ad63fa140ff

git log 에서 출력되는 긴 커밋 해쉬가 아니라
git log --oneline 명령으로 나오는 짧은 커밋 해쉬를 사용할 수도 있다.

예시 )

git tag v0.0.3 c43d813

태그 목록들을 조회하는 명령어 : git tag
또는
git tag --list
git tag -l

태그를 떼는 (삭제하는) 명령어 : git tag --delete 태그이름
또는
git tag -d 태그이름

예시 ) 
git tag --delete v0.0.3
git tag -d v0.0.2


//

명령어로 작업 내용 비교하기

최신 버전과 비교해서 작업 디렉토리 내의 변경사항과 무엇이 다른지 비교하는 명령어 :
git diff
(내 작업 디렉토리 내에서 변경 사항과 최신 커밋을 비교하는 명령어)

git add . 명령어로 작업한 모든 파일을 스테이지에 올린 뒤
스테이지와 최신 커밋을 비교하는 명령어 :
git diff --staged
또는 
git diff --cached

커밋끼리 비교하는 명령어
gi diff 커밋해시A 커밋해시B

단 순서 중요 / 
커밋해시B는 커밋해시A 와 비교해서 뭐가 다르냐

예시 )

git diff af75ecf 88ba506

//

작업 되돌리기 (revert / reset - soft mixed hard) 명령어로 실습

revert 하는 법 : 
git revert 취소할커밋해시

왜인지 모르겠는데 가장 최근의 커밋만 적용되었다??

reset 의 경우 :
git reset 되돌아갈커밋해시
(기본값은 mixed reset으로 작업디렉토리 변경사항만 유지된다.)
(커밋한 사실과 스테이지에 올린 사실이 날라간다.)
혹은 git reset -mixed 되돌아갈커밋해시

soft reset 옵션 추가 : 
(작업디렉토리 변경사항과 스테이지에 올렸다는 사실이 유지된다)
(커밋한 사실만 날라간다.)
git reset --soft 되돌아갈커밋해시

hard reset 옵션 추가 : 
(작업디렉토리 변경사항까지 싹 날라간다)
git reset --hard 되돌아갈커밋해시

//

임시 저장된 작업 내역은 작업 디렉토리에서 사라진다.
최근에 임시 저장된 항목은 0부터 시작하는 낮은 번호가 된다.

작업 임시 저장하기 :
git stash

stash 목록 확인 :
git stash list

간단한 메세지와 함께 임시 저장 :
git stash -m "make ABCDE on a.txt"

임시 저장된 항목 적용하기 : 
git stash apply 적용할스태시

git stash apply stash@{0}

임시 저장된 항목 삭제하기 :
git stash drop stash@{1}

//

브랜치 관리하기

브랜치 목록 조회 :
git branch

* 는 현재 체크아웃 되어있는 브랜치 목록 이름 앞에 붙는다.

최신 커밋에서 foo 라고 하는 브랜치 만들기 :
git branch foo

특정 브랜치로 체크아웃 하기 (작업 환경 변경) :
git checkout 브랜치명

실습 ) foo 브랜치에 커밋 쌓기
touch foo.txt
git add .
git commit -m "foo commit"

git checkout master
git branch
git log

git log 명령어는 입력한(체크아웃된) 브랜치의 최신 커밋까지만 보여준다. 
(이를테면 위에선 foo commit은 보이지 않는다.)

모든 브랜치의 커밋 목록을 확인하기 :
git log --branches

foo 브랜치를 master 브랜치로 병합(merge) 시키기 :
병합하고자 하는 브랜치가 아닌 다른 브랜치로 체크아웃 한 뒤, (git checkout master)
git merge foo

foo 브랜치 삭제하기 :
git branch -d foo

브랜치를 만듦과 동시에 체크아웃 :
git checkout -b 브랜치명

브랜치 병합시 충돌 해결하기

$ git merge bar
Auto-merging c.txt
CONFLICT (content): Merge conflict in c.txt
Automatic merge failed; fix conflicts and then commit the result.

<<<<<<< HEAD
master
=======
bar
>>>>>>> bar

직접 파일에서 수정 후 다시 커밋하기

git add .
git commit

//

rebase 하기

foo 브랜치를 master 브랜치에 대해서 rebase 하기 :

git checkout foo
git rebase master 

//

원격 저장소와 상호작용하기

클론(clone)

git clone git@github.com:kangtegong/collaboration.git

cd collaboration
ls -a

푸쉬(push)

mkdir push_test
cd push_test

로컬 저장소 생성
git init

touch a.txt
touch b.txt
git add .
git commit -m "first commit"

깃허브 사용을 위해 master 브랜치를 main 브랜치로 변경해야 한다.
git branch -M main

★★★★★★★★★★★★★★★★★★★★★★★★★★★★
origin이란 이름의 상호작용할 원격 저장소 추가 (remote 등록)
git remote add [원격저장소이름] [ssh주소]
git remote add origin git@github.com:shy4813/third-repo.git

git remote 명령어로 추가된 원격 저장소 확인
경로까지 함께 확인하려면
git remote -v

로컬 저장소의 commit을 원격저장소로 push 명령어 :
git push origin main
(origin이란 원격 저장소로 main 브랜치의 변경 사항을 push 한다는 의미)

git push -u origin main 라고 
-u 옵션을 주고 실행하게 된다면,
이후부터는 git push 만으로 명령 실행 가능 
(원격저장소 이름과 브랜치 이름을 생략 가능해진다.)

로컬 저장소에서 원격 저장소의 변경 사항을 일단 가져오는 fetch

//

git fetch는 로컬 Git에게 원격 저장소에서 최신 메타데이터 정보를 확인하라는 명령을 전달합니다. 
단 fetch는 원격 저장소에 변경사항이 있는지 확인만 하고, 
변경된 데이터를 로컬 Git에 실제로 가져오지는 않습니다.

반면 git pull은 원격 저장소에서 변경된 메타데이터 정보를 확인할 뿐만 아니라 최신 데이터를 복사하여 로컬 Git에 가져옵니다.

//

fetch 명령도 -u 옵션을 부여하면 한번 실행 후 뒷 내용 생략 가능해진다.

git fetch origin main
git fetch -u origin main

fetch한 커밋을 보기 위해선
git checkout origin/main 
git log

(원격 저장소 origin의 main 브랜치를 보겠다는 의미)

또는
git checkout FETCH_HEAD
git log

//

원격 저장소 변경 사항 병합
git checkout main
git merge origin/main

-> 로컬 저장소와 원격 저장소의 상태가 동일해진다.

//

풀 (pull)
원격 저장소에서 갖고 와서 합치는 방식

git pull origin main
origin에 있는 내용을 main 브랜치로 pull 하겠다는 의미

git pull -u origin main 


//

풀 리퀘스트 (Pull Request)

1. 기여하려는 저장소를 본인 계정으로 포크하기
2. 포크한 저장소를 클론하기
3. 브랜치 생성 후 브랜치에서 작업하기
4. 작업한 브랜치 푸시하기
5. 풀 리퀘스트 보내기

//

이미 포크했다면, Sync fork 업데이트 사항 체크 필수

git clone git@github.com:shy4813/collaboration.git

git checkout -b myname

작업

$ git status
On branch myname
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

git add index.html
git commit -m "add my name in index.html"

푸쉬 :
git push origin myname

(푸쉬할 브랜치가 main 브랜치가 아닌 경우 -u 옵션을 사용하지 못하고 
위와같이 명시적으로 표기해줘야 한다.)






